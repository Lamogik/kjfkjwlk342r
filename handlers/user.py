import aiohttp
from datetime import datetime, time
import time as time1
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext


from cryptopay import CryptoPay, TESTNET
from cryptopay.types import Invoice

# –∏–º–ø–æ—Ä—Ç—ã –ø–∞–∫—Ç–æ–≤
from keyboards.inline import *
from settings import *
from utils.states import *
from filters.admin_filter import IsAdmin
from tt_selenium_check import get_views_with_selenium
from settings import settings
from main import db

router = Router()

# —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏ –Ω–∞ –∫–Ω–æ–ø–∫—É back to menu
@router.message(CommandStart())
async def start_bot(message: Message,
                    bot: Bot,
                    state: FSMContext):
    await state.clear()
    await db.connect()
    if await db.get("SELECT userid from bannedUsers WHERE userid = ?", [message.from_user.id, ]) is None:
        await db.close()
        start_params = message.text.split()
        if len(start_params) > 1:
            referral_code = start_params[1]
            await db.addUser(message.from_user.id, message.from_user.username, 0.0, " ", 0, 0, 0, 0, 0, 0.0, 0.0)
            await db.addRefUser(message.from_user.id, message.from_user.username, referral_code)
            await message.answer(f"""üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:""", reply_markup=start_key)
        else:
            await db.addUser(message.from_user.id, message.from_user.username, 0.0, " ", 0, 0, 0, 0, 0, 0.0, 0.0)
            await message.answer(f"""üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:""", reply_markup=start_key)
    else:
        await db.close()
        await message.answer("""üîí –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    
|  –ü—Ä–∏—á–∏–Ω–∞: <b><i>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</i></b>""", parse_mode="HTML")


@router.callback_query(F.data.startswith("start"))
async def start_bot_call(callback: CallbackQuery):
    await callback.message.edit_text(f"""üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:""", reply_markup=start_key)
    await callback.answer()

@router.callback_query(F.data == "profile")
async def profile_menu(callback: CallbackQuery):
    result = await db.prfilie_info_selector(callback.from_user.id)
    print(result)
    print(type(result))

    if str(result[4]) == " " or str(result[4]) == "None":
        wallet_status = "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        is_wallet = False
    else:
        wallet_status = "–ø–æ–¥–∫–ª—é—á–µ–Ω"
        is_wallet = True

    if int(result[5]) == 0:
        cash_methode = "–∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
    else:
        cash_methode = "–∑–∞ –õ–∏–¥—ã"

    await callback.message.edit_text(f"""üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
    
|  ID: <code>{callback.from_user.id}</code>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: <b><i>{result[7]}</i></b>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b><i>{result[8]}</i></b>
|  –ö–æ–ª-–≤–æ –ª–∏–¥–æ–≤: <b><i>{result[11]}</i></b>
|  –ë–∞–ª–∞–Ω—Å: <b><i>{result[3]} $</i></b>

‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:

|  –ö–æ—à–µ–ª–µ–∫: <b><i>{wallet_status}</i></b>
|  –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã: <b><i>{cash_methode}</i></b>

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Ä–∫–∞: <code>https://t.me/avito_mobot?start={result[10]}</code>""", parse_mode="HTML", reply_markup=profile_key(is_wallet))
    await callback.answer()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.callback_query(F.data.startswith("profile_"))
async def profile_keys_handler(callback: CallbackQuery,
                               state: FSMContext):
    menu = callback.data.split("_")[1]
    if menu == "wallet":
        await state.set_state(AddWallet.wallet)
        await callback.message.edit_text("üëõ –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n<b>‚ö†Ô∏è –£–±–µ–¥–∏—Å—å —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç USDT –≤ —Å–µ—Ç–∏ BEP20</b>", parse_mode="HTML", reply_markup=cancel_key("profile"))
    elif menu == "methode":
        await state.clear()
        methode = await db.methode_picker(callback.from_user.id)
        print(methode)
        await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=methode_key(int(methode)))
    elif menu == "referral":
        await state.clear()
        bot_url = "https://t.me/AMNEZIA_ROBOT?start="
        referral_code = await db.refUrl_picker(callback.from_user.id)
        await callback.message.edit_text(f"""üí† –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b><i>–ø–æ–ª—É—á–∞–π 10% –æ—Ç –ø—Ä–∏–±—ã–ª–∏ c –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i></b>

–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{bot_url + referral_code}</code>""", parse_mode="HTML", reply_markup=back_key("profile"))

    elif menu == "address":
        await state.clear()
        result = await db.wallet_selector(callback.from_user.id)
        if result == " " or result == "None":
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞", show_alert=True)
        else:
            await callback.message.edit_text(f"*üåê –ê–¥—Ä–µ—Å: *||{result}||", parse_mode="MarkdownV2", reply_markup=back_key("profile"))

    await callback.answer()


@router.message(AddWallet.wallet)
async def get_wallet(message: Message,
                     state: FSMContext):
    await state.update_data(wallet=message.text)
    await message.answer(f"<b>‚ö† –ü–æ–¥—Ç–≤–µ—Ä–¥–∞–µ—à—å <code>{message.text}</code> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∞–≤—Ç–æ-–≤—ã–ø–ª–∞—Ç?</b>", parse_mode="HTML", reply_markup=confirm_wallet_key())


@router.callback_query(AddWallet.wallet)
async def confirm_wallet(callback: CallbackQuery,
                         state: FSMContext):
    data = await state.get_data()
    wallet = data.get("wallet")
    print(wallet)
    await db.wallet_updater(callback.from_user.id, wallet)

    result = await db.prfilie_info_selector(callback.from_user.id)
    wallet_status = "–ø–æ–¥–∫–ª—é—á–µ–Ω"

    if int(result[5]) == 0:
        cash_methode = "–∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"
    else:
        cash_methode = "–∑–∞ –õ–∏–¥—ã"

    await state.clear()
    await callback.message.edit_text(fr"""üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:

|  ID: <code>{callback.from_user.id}</code>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: <b><i>{result[7]}</i></b>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b><i>{result[8]}</i></b>
|  –ö–æ–ª-–≤–æ –ª–∏–¥–æ–≤: <b><i>{result[11]}</i></b>
|  –ë–∞–ª–∞–Ω—Å: <b><i>{result[3]} $</i></b>

‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:

|  –ö–æ—à–µ–ª–µ–∫: <b><i>{wallet_status}</i></b>
|  –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã: <b><i>{cash_methode}</i></b>

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ—Ä–∫–∞: <code>https://t.me/avito_mobot?start={result[10]}</code>""", parse_mode="HTML", reply_markup=profile_key(True))
    await callback.answer("–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)

@router.callback_query(F.data.startswith("methode_"))
async def profile_keys_handler(callback: CallbackQuery):
    await db.methode_switcher(callback.from_user.id)
    methode = await db.methode_picker(callback.from_user.id)
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏ —Å–∏—Å—Ç–µ–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=methode_key(int(methode)))
    await callback.answer()


@router.callback_query(F.data == "stats")
async def profile_menu(callback: CallbackQuery):
    ref_count = await db.get_referral_count(callback.from_user.id)
    total_count_of_accs = await db.totalCountAcc_picker(callback.from_user.id)
    await callback.message.edit_text(f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

|  –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b><i>{total_count_of_accs}</i></b>
|  –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b><i>{ref_count}</i></b>""", parse_mode="HTML", reply_markup=back_key("start"))


@router.callback_query(F.data == "info")
async def profile_menu(callback: CallbackQuery):
    await callback.message.edit_text(f"""üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã""", parse_mode="HTML", reply_markup=back_key("start"))


@router.callback_query(F.data == "work")
async def profile_menu(callback: CallbackQuery,
                       state: FSMContext):
    if await db.payout_status_picker(settings.bots.admin_id) == 0:
        await state.set_state(AddAccounts.strings)
        await callback.message.edit_text(f"""üïµÔ∏è‚Äç‚ôÇÔ∏è –°–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã:
    
<b>–£–∫–∞–∂–∏ @username –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - —É–∫–∞–∑—ã–≤–∞–π –∫–∞–∂–¥—ã–π —Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</b>""", parse_mode="HTML", reply_markup=back_key("start"))
    else:
        await callback.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤—ã–ø–ª–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏", show_alert=True)

@router.message(AddAccounts.strings)
async def profile_menu(message: Message,
                       state: FSMContext):
    await state.set_state(AddAccounts.confirm_strings)

    tags = message.text.splitlines()
    valid_tags = []
    string = ""

    for item in tags:
        if item.startswith("@") is True:
            valid_tags.append(item)

    valid_len = len(valid_tags)
    valid_tags = list(dict.fromkeys(valid_tags))
    await state.update_data(confirm_str=valid_tags)

    for item in valid_tags:
        string += f"\n{item}"

    await message.answer(f"""‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å Tik-Tok –∞–∫–∫–∞—É–Ω—Ç(—ã) –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:
    
|  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b><i>{len(tags)}</i></b>
|  –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤: <b><i>{len(valid_tags)}</i></b>
|  –î—É–±–ª–µ–π –æ—á–∏—â–µ–Ω–æ: <b><i>{valid_len - len(valid_tags)}</i></b>


üìí –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b><i>({len(valid_tags)})</i></b>{string}""", parse_mode="HTML", reply_markup=confirm_checking())


@router.callback_query(AddAccounts.confirm_strings)
async def profile_menu(callback: CallbackQuery,
                       state: FSMContext):
    tik_tok_url = "https://www.tiktok.com/"
    data = await state.get_data()
    strings = data.get("confirm_str")
    result = 0
    print(strings)

    for item in strings:
        url = tik_tok_url + item
        print(url)
        count = await db.addTtAccount(callback.from_user.id, item, url, 0, 0, 0, 0)
        result = result + count
    await state.clear()
    await callback.message.edit_text(f"üö∞ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b><i>{result}</i></b>", parse_mode="HTML", reply_markup=exit_key("start"))
    await callback.answer()

    """A D M I N  P A N E L"""

cp = CryptoPay(token=settings.bots.crpt_token, api_server=TESTNET)


@router.message(Command("admin"), IsAdmin([settings.bots.admin_id, 6748143864]))
async def admin_panel(message: Message,
                      state: FSMContext):
    await state.clear()
    await db.addAdmin(message.from_user.id, 0, 0, "–Ω–µ—Ç")
    await message.answer("""<b><i>ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ê–¥–º–∏–Ω!</i></b>""", parse_mode="HTML", reply_markup=admin_panel_key(0))


@router.callback_query(F.data == "adminmenu", IsAdmin([settings.bots.admin_id, 6748143864]))
async def admin_panel(callback: CallbackQuery,
                      state: FSMContext):
    await state.clear()
    await callback.message.edit_text("""<b><i>ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ê–¥–º–∏–Ω!</i></b>""", parse_mode="HTML", reply_markup=admin_panel_key(0))
    await callback.answer()


@router.callback_query(F.data.startswith("admin_"))
async def admin_key_handler(callback: CallbackQuery,
                            state: FSMContext,
                            bot: Bot):
    await state.clear()
    command = callback.data.split("_")[1]
    if command == "run":
        current_time = datetime.now()
        current_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
        await db.last_check_date_updater(callback.from_user.id, current_time)
        await db.checker_status_updater(callback.from_user.id)
        status = await db.checker_status_picker(callback.from_user.id)
        await callback.message.edit_text("""<b><i>ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ê–¥–º–∏–Ω!</i></b>""", parse_mode="HTML", reply_markup=admin_panel_key(status))
        if status == 1:
            user_list = await db.moderatedAccUser_picker()
            print(user_list)
            worker_data = [t[0] for t in user_list]
            for worker in worker_data:
                tt_acc_list = await db.moderatedAccList_picker(worker)
                tt_url_data = [t[0] for t in tt_acc_list]
                for tt_url in tt_url_data:
                    time1.sleep(5)
                    count_of_views = get_views_with_selenium(tt_url)
                    await db.count_of_views_updater(tt_url, count_of_views)
                    balance_per_acc = float(count_of_views) * 0.001
                    await db.checker_balance_updater(int(worker), balance_per_acc)
            await db.checker_status_updater(callback.from_user.id)
            status = await db.checker_status_picker(callback.from_user.id)
            await callback.message.edit_text("""<b><i>ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ê–¥–º–∏–Ω!</i></b>""", parse_mode="HTML",
                                             reply_markup=admin_panel_key(status))

    elif command == "payin":
        await state.set_state(AdminBalanceApp.enter_payin)
        await callback.message.edit_text("""<b><i>üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i></b>
        
|  –í–∞–ª—é—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <b><i>USDT</i></b>
        
<b><i>‚úèÔ∏è –í–≤–µ–¥–∏ —Å—É–º–º—É –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ü–µ–ª—ã–º (99) –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–º —á–∏—Å–ª–æ–º (99.99)</i></b>""", parse_mode="HTML", reply_markup=cancel_key("adminmenu"))
        await callback.answer()

    elif command == "payout":
        amonut_to_pay = await db.payout_total_balance_picker()
        count_of_workers_to_pay = await db.payout_count_worker_picker()
        await callback.message.edit_text(f"üí∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–ª–∞—Ç\n\n|  –í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b><i>{amonut_to_pay}$</i></b>\n|  –í–æ—Ä–∫–µ—Ä–æ–≤ —Å –∑–ø: <b><i>{count_of_workers_to_pay[0]}</i></b>\n\n<b><i>‚ö† –£–±–µ–¥–∏—Å—å —á—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —á–µ–∫–æ–≤</i></b>", parse_mode="HTML", reply_markup=payout_key())
        await callback.answer()

    elif command == "find":
        await state.set_state(AdminFind.username)
        await callback.message.edit_text("""üëÅ –í–≤–µ–¥–∏ <b><i>ID</i></b> –≤–æ—Ä–∫–µ—Ä–∞:""", parse_mode="HTML",  reply_markup=cancel_key("adminmenu"))
        await callback.answer()

    elif command == "date":
        date = await db.last_check_date_picker(callback.from_user.id)
        await callback.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–∏–Ω–≥: {date}", show_alert=True)


@router.message(AdminBalanceApp.enter_payin)
async def get_payin(message: Message,
                    state: FSMContext):
     amount = float(message.text)
     invoice = await cp.create_invoice(amount, "TON")
     await message.answer(f"""üí∏ –û–ø–ª–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {invoice.mini_app_invoice_url}

<b><i>‚ö†Ô∏è –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ CryptoBot</i></b>""", parse_mode="HTML", reply_markup=exit_key("adminmenu"))
     invoice.await_payment(message=message)
     await state.clear()


@cp.polling_handler()
async def handle_payment(
    invoice: Invoice,
    message: Message,
) -> None:
    await message.answer(
        f"payment received: {invoice.amount} {invoice.asset}",
    )


@router.message(AdminFind.username)
async def get_username_worker(message: Message,
                              state: FSMContext):
    try:
        userid = int(message.text)
        worker_info = await db.user_picker(userid)
        print(worker_info)
        if worker_info is not None:
            await db.connect()
            status = await db.get("SELECT userid from bannedUsers WHERE userid = ?", [userid, ])
            await db.close()
            if status is None:
                isBanned = "–Ω–µ –∑–∞–±–∞–Ω–µ–Ω"
            else:
                isBanned = "–∑–∞–±–∞–Ω–µ–Ω"

            await message.answer(f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ <code>{userid}</code>
    
|  @username: <b><i>{worker_info[0]}</i></b>
|  –ë–∞–ª–∞–Ω—Å: <b><i>{worker_info[1]} $</i></b>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b><i>{worker_info[2]}</i></b>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b><i>{worker_info[3]}</i></b>
|  –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b><i>{worker_info[4]}</i></b>
|  –°—Ç–∞—Ç—É—Å: <b><i>{isBanned}</i></b>""", parse_mode="HTML", reply_markup=control_worker(userid))

            await state.clear()
        else:
            await message.answer("""‚ùóÔ∏è –¢–∞–∫–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞""", reply_markup=cancel_key("adminmenu"))
    except ValueError:
        await message.answer("""‚ùóÔ∏è <b><i>ID</i></b> —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞""", parse_mode="HTML",
                             reply_markup=cancel_key("adminmenu"))

@router.callback_query(F.data.startswith("workerban_"))
async def start_ban_worker(callback: CallbackQuery):
    user_id = callback.data.split("_")[1]
    await db.connect()
    username = await db.get("SELECT username FROM users WHERE userid = ?", (user_id,))
    await db.close()
    print(username)
    await callback.message.edit_text(f"üö´ –ó–∞–±–∞–Ω–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞ <b><i>@{username[0]}</i></b>?", parse_mode="HTML", reply_markup=accept_ban(user_id))
    await callback.answer()


@router.callback_query(F.data.startswith("confirmban_"))
async def confirm_ban_worker(callback: CallbackQuery):
    userid = callback.data.split("_")[1]
    await db.banWorker(userid)
    await callback.message.edit_text("üö´ –í–æ—Ä–∫–µ—Ä <b><i>—É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω</i></b>", parse_mode="HTML", reply_markup=exit_key("adminmenu"))
    await callback.answer()


@router.callback_query(F.data.startswith("workerzero_"))
async def zero_worker(callback: CallbackQuery,
                      state: FSMContext):
    user_id = callback.data.split("_")[1]
    await db.connect()
    username = await db.get("SELECT username FROM users WHERE userid = ?", (user_id,))
    balance = await db.get("SELECT balance FROM users WHERE userid = ?", (user_id,))
    await db.close()
    await state.set_state(AdminZeroWorker.userid)
    await state.update_data(user_id=user_id)
    print(username)
    await callback.message.edit_text(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–æ—Ä–∫–µ—Ä–∞ <b><i>@{username[0]}: {balance[0]}$</i></b>\n\n‚å®Ô∏è –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b><i>0.0</i></b>", parse_mode="HTML", reply_markup=cancel_key("adminmenu"))
    await callback.answer()


@router.message(AdminZeroWorker.userid)
async def confirm_zero_worker(message: Message,
                              state: FSMContext):
    balance = float(message.text)
    data = await state.get_data()
    user_id = data.get("user_id")
    await db.balance_updater(user_id, balance)
    await db.connect()
    username = await db.get("SELECT username FROM users WHERE userid = ?", (user_id,))
    await db.close()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b><i>@{username[0]} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: {balance}$</i></b>", parse_mode="HTML", reply_markup=exit_key("adminmenu"))

@router.callback_query(F.data.startswith("workerunban_"))
async def start_ban_worker(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await db.connect()
    if await db.get("SELECT userid from bannedUsers WHERE userid = ?", [user_id]) is None:
        await callback.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    else:
        await db.change("DELETE FROM bannedUsers WHERE userid = ?", [user_id])
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await db.close()

@router.callback_query(F.data == "payout_confirm")
async def payout_confirming_send(callback: CallbackQuery,
                                 bot: Bot):
    await db.payout_status_updater(callback.from_user.id)
    user_list = await db.payout_worker_picker()
    print(user_list)
    worker_data = [t[0] for t in user_list]
    for worker in worker_data:
        await db.connect()
        methode_pay = await db.get("SELECT methode FROM users WHERE userid = ?", (worker,))
        if int(methode_pay[0]) == 0:
            amount = await db.payout_balance_views_picker(worker)
            print(amount)
            # check = await cp.create_check(float(amount), "TON", f"{worker}")
            account = await db.moderationCountAcc_picker(worker)
            await bot.send_message(chat_id=worker, text=f"–ê–∫—Ç–∏–≤–∏—Ä—É–π —á–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É {amount}")
            '''await bot.send_message(chat_id=worker,
                                   text=f"üí∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π —á–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É <b><i>{amount}$</i></b>\n\n{check.bot_check_url}",
                                   parse_mode="HTML")'''
            await db.balance_updater(worker, amount)
            await db.moderation_account_zero_updater(worker)
            await db.moderation_list_deleter(worker)
            await db.payed_accounts_updater(worker, account)
            await db.connect()
            await db.change("UPDATE users SET views_balance = 0 WHERE userid = ?", (worker,))
        else:
            amount = await db.payout_balance_leads_picker(worker)
            print(amount)
            # check = await cp.create_check(float(amount), "TON", f"{worker}")
            account = await db.moderationCountAcc_picker(worker)
            await bot.send_message(chat_id=worker, text=f"–ê–∫—Ç–∏–≤–∏—Ä—É–π —á–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É {amount}")
            '''await bot.send_message(chat_id=worker,
                                   text=f"üí∏ –ê–∫—Ç–∏–≤–∏—Ä—É–π —á–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É <b><i>{amount}$</i></b>\n\n{check.bot_check_url}",
                                   parse_mode="HTML")'''
            await db.balance_updater(worker, amount)
            await db.moderation_account_zero_updater(worker)
            await db.moderation_list_deleter(worker)
            await db.payed_accounts_updater(worker, account)
            await db.connect()
            await db.change("UPDATE users SET leads_balance = 0 WHERE userid = ?", (worker,))
    await db.payout_status_updater(callback.from_user.id)
    await callback.message.edit_text("""<b><i>ü§ë –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –ê–¥–º–∏–Ω!</i></b>""", parse_mode="HTML",
                                     reply_markup=admin_panel_key(0))
    await callback.answer("–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–ª–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)

